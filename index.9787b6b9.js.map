{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-04c82cec4088a985bcbc476a579f9006.js","src/state.ts","node_modules/@parcel/runtime-js/lib/bundle-url.js","node_modules/@parcel/runtime-js/lib/relative-path.js","node_modules/@parcel/runtime-js/lib/runtime-8ee0737084b078fb69076945970b8af4.js","src/index.ts","src/components/todo-item/todo-item.ts","src/pages/home/home.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./bundle-manifest').register(JSON.parse(\"{\\\"62ie6\\\":\\\"index.9787b6b9.js\\\",\\\"CpEOt\\\":\\\"delete.7ec657ce.svg\\\"}\"));","export const state = {\r\n    data: {\r\n        tasks: [],\r\n    },\r\n\r\n    listeners: [],\r\n\r\n    // Initializer\r\n    init() {\r\n        // Get the local data\r\n        const localData = JSON.parse(localStorage.getItem(\"saved-tasks\"));\r\n\r\n        // If localData returns \"null\", do nothing\r\n        if (!localData) {\r\n            return;\r\n        } else {\r\n            this.setState(localData);\r\n        }\r\n    },\r\n\r\n    // Getter\r\n    getState() {\r\n        return this.data;\r\n    },\r\n\r\n    // Setter\r\n    setState(newState) {\r\n        this.data = newState;\r\n\r\n        // Save the changes made to the state\r\n        localStorage.setItem(\"saved-tasks\", JSON.stringify(this.data));\r\n\r\n        for (const cbFunction of this.listeners) {\r\n            cbFunction();\r\n        }\r\n    },\r\n\r\n    // Only active/existing tasks getter\r\n    getActiveTasks() {\r\n        const currentState = this.getState();\r\n\r\n        return currentState.tasks.filter((t) => !t.deleted);\r\n    },\r\n\r\n    // Change completed property from an item method\r\n    changeItemStatus(id: string, value: boolean) {\r\n        // Get the current state\r\n        const currentState = this.getState();\r\n\r\n        // Find the task that needs to be changed\r\n        const foundTask = currentState.tasks.find((t) => t.id == parseInt(id));\r\n\r\n        // Change the task property\r\n        foundTask.completed = value;\r\n\r\n        this.setState(currentState);\r\n    },\r\n\r\n    // Delete task method\r\n    deleteTask(taskId: string) {\r\n        // Get the current state\r\n        const currentState = this.getState();\r\n\r\n        // Find the task that needs to be deleted\r\n        const foundTask = currentState.tasks.find(\r\n            (t) => t.id == parseInt(taskId)\r\n        );\r\n\r\n        // Change the task deleted property\r\n        foundTask.deleted = true;\r\n\r\n        this.setState(currentState);\r\n    },\r\n\r\n    // Add task method\r\n    addTask(taskText: string) {\r\n        // Get the current state\r\n        const currentState = this.getState();\r\n\r\n        // Aux variables\r\n        const TASK_LIMIT = 200;\r\n        const currentIds = currentState.tasks.map((t) => t.id);\r\n\r\n        // Just a test\r\n        if (currentIds.length == TASK_LIMIT) {\r\n            alert(\r\n                \"You have reached the tasks limit!\\nExecute localStorage.clear() (Only for devs ;))\"\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        // Generate the task id\r\n        let taskId = Math.floor(Math.random() * TASK_LIMIT) + 1;\r\n\r\n        // In case that the task id is repeated, generate other until it is not\r\n        while (currentIds.includes(taskId)) {\r\n            taskId = Math.floor(Math.random() * TASK_LIMIT) + 1;\r\n        }\r\n\r\n        // Create the new task\r\n        const newTask = {\r\n            id: taskId,\r\n            text: taskText,\r\n            completed: false,\r\n            deleted: false,\r\n        };\r\n\r\n        // Push the new task to the current tasks collection\r\n        currentState.tasks.push(newTask);\r\n\r\n        this.setState(currentState);\r\n    },\r\n\r\n    // Subscribe method\r\n    subscribe(cbFunction: (any: any) => any) {\r\n        this.listeners.push(cbFunction);\r\n    },\r\n};\r\n","\"use strict\";\n\n/* globals document:readonly */\nvar bundleURL = null;\n\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  let matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","\"use strict\";\n\nvar resolve = require('./bundle-manifest').resolve;\n\nmodule.exports = function (fromId, toId) {\n  return relative(dirname(resolve(fromId)), resolve(toId));\n};\n\nfunction dirname(_filePath) {\n  if (_filePath === '') {\n    return '.';\n  }\n\n  var filePath = _filePath[_filePath.length - 1] === '/' ? _filePath.slice(0, _filePath.length - 1) : _filePath;\n  var slashIndex = filePath.lastIndexOf('/');\n  return slashIndex === -1 ? '.' : filePath.slice(0, slashIndex);\n}\n\nfunction relative(from, to) {\n  if (from === to) {\n    return '';\n  }\n\n  var fromParts = from.split('/');\n\n  if (fromParts[0] === '.') {\n    fromParts.shift();\n  }\n\n  var toParts = to.split('/');\n\n  if (toParts[0] === '.') {\n    toParts.shift();\n  } // Find where path segments diverge.\n\n\n  var i;\n  var divergeIndex;\n\n  for (i = 0; (i < toParts.length || i < fromParts.length) && divergeIndex == null; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      divergeIndex = i;\n    }\n  } // If there are segments from \"from\" beyond the point of divergence,\n  // return back up the path to that point using \"..\".\n\n\n  var parts = [];\n\n  for (i = 0; i < fromParts.length - divergeIndex; i++) {\n    parts.push('..');\n  } // If there are segments from \"to\" beyond the point of divergence,\n  // continue using the remaining segments.\n\n\n  if (toParts.length > divergeIndex) {\n    parts.push.apply(parts, toParts.slice(divergeIndex));\n  }\n\n  return parts.join('/');\n}\n\nmodule.exports._dirname = dirname;\nmodule.exports._relative = relative;","module.exports = require('./bundle-url').getBundleURL() + require('./relative-path')(\"62ie6\", \"CpEOt\")","import { initHomePage } from \"./pages/home/home\";\r\nimport { initTodoItem } from \"./components/todo-item/todo-item\";\r\nimport { state } from \"./state\";\r\n\r\n// Main function\r\n(function () {\r\n    // First of all, initialize all data\r\n    state.init();\r\n\r\n    // Initialize component\r\n    initTodoItem();\r\n\r\n    // Initialize page\r\n    initHomePage(document.querySelector(\"#root\"));\r\n})();\r\n","const trashImage = require(\"url:../../assets/delete.svg\");\r\n\r\n// Todo item initializer\r\nexport function initTodoItem() {\r\n    // Create the class\r\n    class TodoItem extends HTMLElement {\r\n        // Initial properties\r\n        shadow: ShadowRoot;\r\n        itemText: string;\r\n        checked: boolean;\r\n        todoId: string;\r\n\r\n        // Constructor\r\n        constructor() {\r\n            // Inherit all properties\r\n            super();\r\n\r\n            // Create the Shadow DOM\r\n            this.shadow = this.attachShadow({ mode: \"open\" });\r\n        }\r\n\r\n        // Method that connects the Component to the DOM\r\n        connectedCallback() {\r\n            // Get the item text, the checked and the id attriibute\r\n            this.itemText = this.getAttribute(\"item-text\");\r\n            this.checked = JSON.parse(this.getAttribute(\"checked\"));\r\n            this.todoId = this.getAttribute(\"todo-id\");\r\n\r\n            // Give some styles to the component\r\n            const styles = document.createElement(\"style\");\r\n            styles.innerHTML = `\r\n    \r\n            * {\r\n            box-sizing: border-box;\r\n            }\r\n    \r\n            .todo-item {\r\n                display: grid;\r\n                grid-template: 1fr / minmax(0, 1fr) 25px;\r\n                column-gap: 7.5px;\r\n                \r\n                min-height: 100px;\r\n                padding: 15px;\r\n                \r\n                background-color: #fff599;\r\n                border-radius: 4px;\r\n                box-shadow: 0px 0px 15px -10px rgba(0, 0, 0, 0.5);\r\n            }\r\n\r\n            .todo-item-active {\r\n                border: 1px solid black;\r\n            }\r\n    \r\n            .todo-item__text {\r\n                margin: 0;\r\n            \r\n                font-size: 18px;\r\n                overflow-wrap: break-word;\r\n            }\r\n    \r\n            .checked-text {\r\n                text-decoration: line-through;\r\n            }\r\n            \r\n            .todo-item__interactive {\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: space-between;\r\n                align-items: center;\r\n            \r\n                padding: 2.5px 0;\r\n            }\r\n            \r\n            .interactive-checkbox {\r\n                margin: 0;\r\n            }\r\n            \r\n            .interactive-delete {\r\n                width: 80%;\r\n                height: 20px;\r\n            \r\n                cursor: pointer;\r\n            }  \r\n            `;\r\n\r\n            // Render the element\r\n            this.render();\r\n\r\n            // Append styles to the shadow\r\n            this.shadow.appendChild(styles);\r\n        }\r\n\r\n        // Method used to add listeners to the todo-item\r\n        addListeners() {\r\n            // Aux variables\r\n            const checkEl: HTMLElement = this.shadow.querySelector(\r\n                \".interactive-checkbox\"\r\n            );\r\n            const trashEl: HTMLElement = this.shadow.querySelector(\r\n                \".interactive-delete\"\r\n            );\r\n            const cardEl: HTMLElement = this.shadow.querySelector(\".todo-item\");\r\n\r\n            // Checkbox events\r\n            checkEl.addEventListener(\"click\", (e) => {\r\n                // First of all, prevent the event propagation, so the click event from the item is not triggered\r\n                e.stopPropagation();\r\n\r\n                // Get the event target\r\n                const eventTarget: any = e.target;\r\n\r\n                // Create a custom event, that sends data to the page\r\n                const checkEvent = new CustomEvent(\"change\", {\r\n                    detail: {\r\n                        id: this.todoId,\r\n                        value: eventTarget.checked,\r\n                    },\r\n                });\r\n\r\n                // Dispatch the event, from the WHOLE component ---> this, in order to listen it easily\r\n                this.dispatchEvent(checkEvent);\r\n            });\r\n\r\n            // Todo-item click events\r\n            this.addEventListener(\"click\", () => {\r\n                // Get the classlist from the card\r\n                const cardClasses = cardEl.classList;\r\n\r\n                // If the card is active, just deactivate it\r\n                if (cardClasses.contains(\"todo-item-active\")) {\r\n                    cardClasses.remove(\"todo-item-active\");\r\n                    trashEl.style.display = \"none\";\r\n                }\r\n\r\n                // If the card wasn't clicked, activate it\r\n                else {\r\n                    cardClasses.add(\"todo-item-active\");\r\n                    trashEl.style.display = \"initial\";\r\n                }\r\n            });\r\n\r\n            // Click on trash image event\r\n            trashEl.addEventListener(\"click\", (e) => {\r\n                // First of all, prevent the event propagation, so the click event from the item is not triggered\r\n                e.stopPropagation();\r\n\r\n                // Custom event, that sends the id of the task item\r\n                const deleteEvent = new CustomEvent(\"delete\", {\r\n                    detail: {\r\n                        id: this.todoId,\r\n                    },\r\n                });\r\n\r\n                // Dispatch the event\r\n                this.dispatchEvent(deleteEvent);\r\n            });\r\n        }\r\n\r\n        // Render method\r\n        render() {\r\n            // Give the element some content\r\n            this.shadow.innerHTML = `\r\n            <div class=\"todo-item\">\r\n                <p class=\"todo-item__text ${\r\n                    this.checked ? \"checked-text\" : \"\"\r\n                }\">${this.itemText}</p>\r\n                <div class=\"todo-item__interactive\">\r\n                    <input type=\"checkbox\" ${\r\n                        this.checked ? \"checked\" : \"\"\r\n                    } class=\"interactive-checkbox\" />\r\n                    <img\r\n                        src=\"${trashImage}\"\r\n                        style=\"display: none;\"\r\n                        class=\"interactive-delete\"\r\n                    />\r\n                </div>\r\n            </div>`;\r\n\r\n            // Add listeners\r\n            this.addListeners();\r\n        }\r\n    }\r\n\r\n    // Define the todo-item\r\n    customElements.define(\"todo-item\", TodoItem);\r\n}\r\n","import { state } from \"../../state\";\r\n\r\n// Home function\r\nexport function initHomePage(containerEl: Element) {\r\n    // Function that render all the tasks\r\n    function renderTasks(itemContainer: Element, taskList: Array<any>) {\r\n        // First of all, clear the container content\r\n        itemContainer.innerHTML = \"\";\r\n\r\n        // Then, sort the tasks by their completed attribute\r\n        const sortedTasks = taskList.sort((t) => t.completed);\r\n\r\n        // Then, add tasks to the container\r\n        sortedTasks.forEach((t) => {\r\n            // Create the todo-item element\r\n            const todoItemEl = document.createElement(\"todo-item\");\r\n\r\n            // Add attributes to the item\r\n            todoItemEl.setAttribute(\"item-text\", t.text);\r\n            todoItemEl.setAttribute(\"checked\", t.completed);\r\n            todoItemEl.setAttribute(\"todo-id\", t.id);\r\n\r\n            // Listen the checkbox changes\r\n            todoItemEl.addEventListener(\"change\", (e: any) => {\r\n                state.changeItemStatus(e.detail.id, e.detail.value);\r\n            });\r\n\r\n            // Listen the delete event\r\n            todoItemEl.addEventListener(\"delete\", (e: any) => {\r\n                state.deleteTask(e.detail.id);\r\n            });\r\n\r\n            // Append the item to the container\r\n            itemContainer.appendChild(todoItemEl);\r\n        });\r\n    }\r\n\r\n    // Give the container some content\r\n    containerEl.innerHTML = `\r\n        <h1 class=\"title\">Mis pendientes</h1>\r\n        <form class=\"page-form\">\r\n        <div class=\"page-form__labeled-input\">\r\n        <label for=\"pendinput\" class=\"page-form__label\"\r\n        >Nuevo pendiente</label\r\n        >\r\n        <input\r\n        type=\"text\"\r\n        autocomplete=\"off\"\r\n        class=\"page-form__input\"\r\n        id=\"pendinput\"\r\n        name=\"pendinput\"\r\n        />\r\n        </div>\r\n        <button class=\"page-form__button\">Agregar</button>\r\n        </form>\r\n        \r\n        <div class=\"todo-container\"></div>`;\r\n\r\n    // Get the active tasks from the state\r\n    const currentStateTasks = state.getActiveTasks();\r\n\r\n    // Get the items container\r\n    const itemContainer = containerEl.querySelector(\".todo-container\");\r\n\r\n    // Render all the tasks/items\r\n    renderTasks(itemContainer, currentStateTasks);\r\n\r\n    // Add an event listener for the form\r\n    containerEl.querySelector(\".page-form\").addEventListener(\"submit\", (e) => {\r\n        // Prevent default behavior\r\n        e.preventDefault();\r\n\r\n        // Get the input field text\r\n        const inputEl: any = containerEl.querySelector(\".page-form__input\");\r\n        const inputText = inputEl.value.trim();\r\n\r\n        // If there's an empty string, do nothing\r\n        if (inputText == \"\") {\r\n            return;\r\n        }\r\n\r\n        // Add the new task\r\n        state.addTask(inputText);\r\n\r\n        // Clear the input field\r\n        inputEl.value = \"\";\r\n    });\r\n\r\n    // Subscribe to the changes made to the state\r\n    state.subscribe(() => {\r\n        // Every time the state is changed, it will be necessary to get and render the latest items/tasks\r\n        renderTasks(itemContainer, state.getActiveTasks());\r\n    });\r\n}\r\n"],"names":["$7d806a7a603c235ec027b73d847f4d95$var$mapping","$7d806a7a603c235ec027b73d847f4d95$export$357eb1b4f03c1402","pairs","keys","Object","i","length","$7d806a7a603c235ec027b73d847f4d95$export$40339995e8a21591","id","resolved","Error","parcelRequire","register","JSON","parse","$1204b8e3a5fa486958edacc2be522dba$export$c837a8b98c265ae3","data","tasks","listeners","init","localData","localStorage","getItem","setState","getState","newState","setItem","stringify","this","cbFunction","getActiveTasks","filter","t","deleted","changeItemStatus","value","currentState","find","parseInt","completed","deleteTask","taskId","addTask","taskText","currentIds","map","alert","Math","floor","random","includes","newTask","text","push","subscribe","$634f916bc30b7d6650877f3f4b6a8b3a$var$bundleURL","$634f916bc30b7d6650877f3f4b6a8b3a$var$getBaseURL","url","replace","$634f916bc30b7d6650877f3f4b6a8b3a$export$da289beea9c5b10d","err","matches","stack","match","$634f916bc30b7d6650877f3f4b6a8b3a$var$getBundleURL","resolve","$824bc590bf0a3702ac7bd27152cb0639$var$dirname","_filePath","filePath","slice","slashIndex","lastIndexOf","$824bc590bf0a3702ac7bd27152cb0639$var$relative","from","to","fromParts","split","shift","divergeIndex","toParts","parts","apply","join","module","exports","fromId","toId","$824bc590bf0a3702ac7bd27152cb0639$require$resolve","_dirname","_relative","$de0d60e43180ae2591235462aa9b7c43$exports","getBundleURL","TodoItem","HTMLElement","super","shadow","attachShadow","mode","connectedCallback","itemText","getAttribute","checked","todoId","styles","document","createElement","innerHTML","render","appendChild","addListeners","checkEl","querySelector","trashEl","cardEl","addEventListener","e","stopPropagation","eventTarget","target","checkEvent","CustomEvent","detail","dispatchEvent","cardClasses","classList","contains","remove","style","display","add","deleteEvent","customElements","define","$46e724c6e0aed844e0bd86a27f28fcad$export$f6e0acefa07b37c1","containerEl","renderTasks","itemContainer","taskList","sort","forEach","todoItemEl","setAttribute","currentStateTasks","preventDefault","inputEl","inputText","trim","$0d2fbe72f968587155813737081a3b3f$export$36e0f3cd0ce1227"],"version":3,"file":"index.9787b6b9.js.map"}